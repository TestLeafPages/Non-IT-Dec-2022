TestNG
------
Is an automation testing framework. NG-Next generation

Junit-Java

-It is a open source framework
1.Has a feature to perform sequential test execution one by one.
2.Has a feature to perform parallel test execution-3 three browser
3.Gives test execution status(pass/fail)
4.Gives test execution summary report(html report)-index.html
5.support data driven to execute test with multiple set data @Dataprovider
6.support cross browser testing
7.To Control the execution flow by annotation and attribute.
8.Assertion to perform validation and verification.
9.Automatic retry of failed test case-network

Software:
TestNg plug-in
TestNG maven dependency-->Library--->Required for developing TestNG Scripts 

Classroom:1
========
https://github.com/LeafPages/SelDec2022/blob/main/testcase.zip
2. Download testcase.zip
3. Extract the zip file
4. copy the testcase folder
5. paste it under scr/main/java

Steps to convert standalone testcase into TestNG testcase
----------------------------------------------------------
1. Remove static keyword from main method
2. Remove String[] args argument
3. Rename main() into meaningful method name
4. Apply @Test on top of the method

Class room-2
=========
Eecute the testcase Sequentially and parallel
Steps: Select the testcases-->rightclick Testng-->convert to TestNg
For Parallel-->select parallel mode-Classes 
add verbose
Execute from Xml file

Classroom 3:(Annotation)
==========
Create a common class
Move all the common steps to common class (remove those steps  in the testcases)
Use @Before and @After Method annotation to define your precondition and post condition Methods
Extend the common class to leads classes

How to run multiple testcase through TestNg?
1.Select the testcase that you like to run together
2.Convert them as testng---->Convert TestNg
3.This will generate the testng xml file
4.click the xml file and open the source tab
ClassRoom 2:
sequential
Convert a xml that can run sequential

Xml Structure:
<Suite>----->all testcase together in one xml

   <Test>---->Create Lead
   
        <Class>---->individual java file
		 
		     @Test
			 
			 <method>
			 
			 </method>
			 
		</class>
		
	</Test>
	
</suite>
		
		Annotation Structure:
		
	@BeforeSuite-----Report initialization
	
	  @BeforeTest-----Data connection(db,excel)
	  
	      @BeforeClass---add the information of testcase to report(author,test,category)
		   
		      @BeforeMethod----Launching the browser
			  
			  @Test(Mandatory)
			  
			  @AfterMethod-----close the browser
			  
		  @AfterClass----close
		 
	  @AfterTest-------close the db connection
	  
	  
    @AfterSuite------close the report